// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    
    // A or C instruction
    Not(in=instruction[15],out=Ains);


    //
    // Registers
    //

    // ARegister
    // Fed by instruction and ALU output
    // The A instruction or 'd1' bit mean store this value in the register
    Mux16(a[0..14]=instruction[0..14],b=aluO,sel=instruction[15],out=inA);
    Or(a=Ains,b=instruction[5],out=loadA);
    ARegister(in=inA,load=loadA,out[0..14]=regA,out[0..14]=addressM);

    // The D register
    // Fed by ALU output
    // The 'd2' bit means store this value in the register
    And(a=instruction[15],b=instruction[4],out=loadD);
    DRegister(in=aluO,load=loadD,out=regD);

    // If this is a C instruction and bit 'd3' is set
    // then set writeM
    And(a=instruction[15],b=instruction[3],out=writeM);



    // The program counter
    // Fed by the A register
    // Use the control bits form the ALU to check if output
    // > or < zero, and compare with the jump flags.
    Or(a=neg,b=zer,out=ngrt);
    Not(in=ngrt,out=grt);
    And(a=grt,b=instruction[0],out=gtj);
    And(a=zer,b=instruction[1],out=eqj);
    And(a=neg,b=instruction[2],out=ltj);
    Or(a=gtj,b=eqj,out=tjmp1);
    Or(a=tjmp1,b=ltj,out=tjmp2);
    And(a=instruction[15],b=tjmp2,out=jmp);
    Not(in=jmp,out=inc);
    PC(in[0..14]=regA,reset=reset,load=jmp,inc=inc,out[0..14]=pc);


    //
    // ALU logic
    //

    // Select whether A or M gets fed into the ALU
    // Fed by A register and previous value of M, selected by the 'a' bit
    Mux16(a[0..14]=regA,b=inM,sel=instruction[12],out=am);

    // ALU
    // Fed by D register and either A or M depending the 'am' from Mux chip above
    ALU(x=regD,y=am,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=aluO,out=outM,zr=zer,ng=neg);

}